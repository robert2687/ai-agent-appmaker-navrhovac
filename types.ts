/**
 * @enum {string}
 * @description Defines the available AI model providers.
 */
export enum Provider {
    /** The Gemini provider from Google. */
    Gemini = 'Gemini',
    /** The Hugging Face provider. */
    HuggingFace = 'Hugging Face',
    /** The Together.AI provider. */
    TogetherAI = 'Together.AI',
}

/**
 * @enum {string}
 * @description Represents the originator of a message in the chat.
 */
export enum Role {
    /** A message sent by the user. */
    USER = 'user',
    /** A message generated by the AI model. */
    MODEL = 'model',
    /** A message indicating an error occurred. */
    ERROR = 'error',
}

/**
 * @enum {string}
 * @description Defines the specialized AI agents available, each with a unique system prompt.
 */
export enum Agent {
    /** A general-purpose, helpful AI assistant. */
    Default = 'Default',
    /** An AI that designs software architectures. */
    SystemsArchitect = 'Systems Architect',
    /** An AI that creates detailed agent personas. */
    BehavioralModeler = 'Behavioral Modeler',
    /** An AI that designs virtual models of real-world systems. */
    DigitalTwin = 'Digital Twin',
    /** An AI that provides production-ready code for API integration. */
    ApiIntegration = 'API Integration',
    /** An AI that generates written content. */
    ContentCreator = 'Content Creator',
    /** An AI that summarizes text. */
    Summarizer = 'Summarizer',
    /** An AI that generates self-contained HTML web application previews. */
    AppPreviewer = 'App Previewer',
    /** An AI that explains how to use a hypothetical code visualization tool. */
    CodeCanvas = 'Code Canvas',
}

/**
 * @interface Message
 * @description Represents a single message within a chat session.
 */
export interface Message {
    /** The role of the message originator (user, model, or error). */
    role: Role;
    /** The text content of the message. */
    content: string;
    /** Optional array of Base64-encoded image URLs, for messages from the image generation model. */
    imageUrls?: string[];
    /** The agent that generated the message, if applicable. */
    agent?: Agent;
}

/**
 * @interface ChatSession
 * @description Represents a complete chat session, including its ID, title, and all messages.
 */
export interface ChatSession {
    /** A unique identifier for the chat session. */
    id: string;
    /** The title of the chat session, often generated from the first user message. */
    title: string;
    /** An array of messages that make up the conversation. */
    messages: Message[];
}